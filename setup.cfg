[metadata]
name = matchpy
description = A library for pattern matching on symbolic expressions.
long_description = file: README.rst
author = Manuel Krebber
author_email = admin@wheerd.de
url = https://github.com/HPAC/matchpy
license = MIT
classifiers = Development Status :: 3 - Alpha
              Intended Audience :: Developers
              License :: OSI Approved :: MIT License
              Programming Language :: Python
              Programming Language :: Python :: 3
              Programming Language :: Python :: 3.6
              Programming Language :: Python :: 3.7
              Programming Language :: Python :: Implementation :: CPython
project_urls = Source = https://github.com/HPAC/matchpy
               Tracker = https://github.com/HPAC/matchpy/issues
               Documentation = https://matchpy.readthedocs.io/

[options]
packages = find:
zip_safe = True
test_suite = tests
python_requires = >=3.6
setup_requires = setuptools>=36.7.0
                 setuptools_scm>=1.7.0
                 pytest-runner
tests_require = matchpy[tests]
install_requires = hopcroftkarp>=1.2,<2.0
                   multiset>=2.0,<3.0

[options.packages.find]
exclude = tests

[options.extras_require]
graphs = graphviz>=0.5,<0.6
tests = pytest>=3.0,<4.0
        hypothesis>=3.6,<4.0
docs = sphinx_rtd_theme
       Sphinx>=1.4,<2.0
develop = %(docs)s
          %(tests)s
          pylint>=1.6,<2.0
          coverage>=4.2,<5.0
          pytest-cov>=2.4,<3.0
          coveralls
          flake8

[flake8]
max-line-length = 120
select = E101,W191,W291,W293,E111,E112,E113,W292,W391

[pep8]
max-line-length = 120

[yapf]
based_on_style = pep8
column_limit = 120
coalesce_brackets = True
dedent_closing_brackets = True
join_multiple_lines = False
align_closing_bracket_with_visual_indent = False
split_penalty_after_opening_bracket = 0
split_penalty_for_added_line_split = 30
split_penalty_before_if_expr = 30
split_before_first_argument = True

[aliases]
test = pytest

[coverage:run]
branch = True

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    def __str__
    raise AssertionError
    raise NotImplementedError
    return NotImplemented
    assert False
    if __name__ == .__main__.:
    if TYPE_CHECKING:
